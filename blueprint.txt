i want:
- login and signup endpoint to be for $ rsm or the first run

- new-key to be a command like % rsm new-key ... (UNLIKE -k that shows pain text the account key)
- logout to be a command that just logs you out (ask for confirmation)

- list to be a command that shows the table specs if no table provided else, it shows the table contents
  like $ rsm list <tablename_opt>, the GET of the tablename is sent if a tablename is provided

- create and delete to be commands that call the create table and delete table endpoints, like
  $ rsm create <tablename>, or $ rsm delete <tablename>, IMPORTANT, always ask for confirmation
  before deleting

- add, remove, update, clear to be commands that call the endpoints of the speficied table, like
  $ rsm add <task_str> or $ rsm remove <id> or $ rsm update <id> or $ rsm clear <tablename_str>
  NOTE THAT THE ID IS ASSIGNED ON THE CLI CLIENT, TO THE ENDPOINT THE DESCRIPTION IS SENT
  IMPORTANT, always ask for confirmation before deleting

so the "general" command structure could be something like:

$ rsm <new-key> <opts>
$ rsm <logout> <opts>

$ rsm <list> <tablename_opt> <opts>

$ rsm <create | delete> <tablename_str> <opts>

$ rsm <add> <task_str | file> <opts>
$ rsm <remove | update> <id> opts
$ rsm <clear> <tablename_str>

THIS COULD MOST LIKELY CHANGE
SEE BELOW


...
some flag could be:

- `--due` `-d` add a due time, which is just a boolean, this would be used at table creation, so something like `$rsm create useful -d`
  in the case of adding a due to a task in a table that supports due time it would be something like `$ rsm todo add "important thing" -d 22:30`
  (if no date is present it will be set to the current day, if the time wrote is already passed it will be set to tomorrow, to specify the date precisely the format
  is '%YYYY%MM%DD %HH%MM'
- after the `<table> add` a `--file` `-f` to add a file, which under the hood just converts the file into a string then adds it (if it respects the char limit)
  this flag also needs a file so its syntax would be like `$ rsm todo add -f todo.txt`
- after the `--file` flag a -l flag (WORK IN PROGRESS, SEE BELOW) which could specify the line or the lines to stringify to then add
  in the case of a single line something like `$ rsm reminder add -f foo.py -l 10`, or in the case of a range of lines
  `$ rsm reminder add -f foo.py -r 10-15`
- a `--group` `-g` to specify to which group the task belongs to (the default is `general`, in the query to the db the output could be ordered by the group)
  the use would be something like `$rsm todo add "do that" -g important`
- other things sure will pop onto my mind during the implementation

For the actual data visualization the commands would be:
...

# save a single line
$ rsm sync add -f init.lua -l 33
# save multiple lines
$ rsm sync add -f init.lua -r 33-40
...

use the flags to get data for the commands, so something like:

for add
-t --task
OR
-f --file
    -l --line
    -r --range
(if both are added throw like task conflict err)

-d --due (if supported if not -> due unsupported err)
-g --group (opt)
$ rsm add -t "go to the grocery store" -d 10:30 -g important

for create
-d --due  (if present sets has due to true)
$ rsm create <tablename> -d

for delete
$ rsm delete <tablename>

for list
-g --group (requires tablename)
-s --sort-by (requires tablename)
$ rsm list <tablename_opt> <opts>
